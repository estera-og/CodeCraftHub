openapi: 3.0.3
info:
  title: User Management Service
  version: "1.0"
servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id: { type: string, example: 68efc61fed96ab0c2d590ef8 }
        email: { type: string, format: email, example: johnsmith@example.com }
        name: { type: string, example: John Smith }
        role:
          type: string
          enum: [student, mentor, admin]
          example: student
        isActive: { type: boolean, example: true }
        failedLoginCount: { type: integer, example: 0 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        lastLoginAt: { type: string, format: date-time, nullable: true }
    RegisterRequest:
      type: object
      required: [email, name, password]
      properties:
        email: { type: string, format: email }
        name: { type: string }
        password: { type: string, format: password, minLength: 8 }
    RegisterResponse:
      type: object
      properties:
        id: { type: string, example: 68efc61fed96ab0c2d590ef8 }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    Tokens:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }
    PagedUsers:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/User' }
        total: { type: integer, example: 11 }
        page: { type: integer, example: 1 }
        pages: { type: integer, example: 2 }
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message: { type: string, example: Forbidden }

paths:
  /health:
    get:
      summary: Health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }

  /users/register:
    post:
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RegisterResponse' }
        "400": { description: Bad request }

  /users/login:
    post:
      summary: Login and get tokens
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        "200":
          description: Tokens
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tokens' }
        "401": { description: Invalid credentials }

  /users/refresh:
    post:
      summary: Exchange refresh token for a new access token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
        "401": { description: Invalid refresh token }

  /users/me:
    get:
      summary: Get current user
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "401": { description: Unauthorized }

    patch:
      summary: Update current user (name/email)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string, format: email }
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "401": { description: Unauthorized }

  /users:
    get:
      summary: List users (admin only)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          description: Paged users
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedUsers' }
        "403":
          description: Forbidden
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        "401": { description: Unauthorized }
